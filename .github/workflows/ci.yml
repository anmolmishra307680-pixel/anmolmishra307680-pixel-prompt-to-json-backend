name: CI
on: [push, pull_request]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set up test environment
        run: |
          echo "DATABASE_URL=sqlite:///test.db" >> $GITHUB_ENV
          echo "API_KEY=test-key" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
      
      - name: Run linting
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      - name: Run tests
        run: |
          pytest tests/ -v --tb=short --disable-warnings
      
      - name: Test coverage
        run: |
          pip install pytest-cov
          pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing
        continue-on-error: true
      
      - name: Build Docker image
        run: |
          docker build -t prompt-agent:${{ github.sha }} .
          docker build -t prompt-agent:latest .
      
      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container -p 8000:8000 \
            -e DATABASE_URL=sqlite:///test.db \
            -e API_KEY=test-key \
            -e JWT_SECRET=test-jwt-secret \
            -e DEMO_USERNAME=testuser \
            -e DEMO_PASSWORD=testpass \
            prompt-agent:latest
          sleep 15
          # Test that server is responding (expect 401 for all protected endpoints)
          curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ | grep -q "401" || exit 1
          curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/metrics | grep -q "401" || exit 1
          # Test that server accepts valid requests (get token first)
          TOKEN=$(curl -s -X POST "http://localhost:8000/token" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: test-key" \
            -d '{"username":"testuser","password":"testpass"}' | \
            python3 -c "import sys, json; print(json.load(sys.stdin)['access_token'])" 2>/dev/null || echo "")
          if [ ! -z "$TOKEN" ]; then
            curl -f -H "X-API-Key: test-key" -H "Authorization: Bearer $TOKEN" http://localhost:8000/ || echo "Auth test failed but container is running"
          fi
          docker stop test-container
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true